# ALUNO: Eros Felipe de Quevedo Dos Santos


# ENUNCIADO: 

# Para obter os pontos relativos a este trabalho, voc√™ dever√° criar um programa, utilizando a
# linguagem Python, C, ou C++. Este programa, quando executado, ir√° apresentar os resultados de
# opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.
# O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt)
# contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas
# em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas
# segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de
# opera√ß√µes que est√£o descritas no arquivo, este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas
# seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira linha apresenta o c√≥digo da
# opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e
# terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo
# das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
# 4
# U
# 3, 5, 67, 7
# 1, 2, 3, 4
# I
# 1, 2, 3, 4, 5
# 4, 5
# D
# 1, A, C, 34
# A, C, D, 23
# C
# 3, 4, 5, 5, A, B, R
# 1, B, C, D, 1
# Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um
# produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë, ùüì, ùüîùüï, ùüï} e
# {ùüè, ùüê, ùüë, ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).
# A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados
# dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter
# a informa√ß√£o e a formata√ß√£o mostrada a seguir:
# Uni√£o: conjunto 1 {3, 5, 67, 7}, conjunto 2 {1, 2, 3, 4}. Resultado: {3, 5, 67, 7, 1, 2, 4}
# Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer
# um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo
# de textos de entrada formatada segundo o exemplo de sa√≠da acima. Observe as letras mai√∫sculas e
# min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.
# No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e
# pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o,
# implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento.

# Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada
# contendo um n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem
# diferentes. Os arquivos de entrada criados para os seus testes devem estar dispon√≠veis tanto no
# ambiente repl.it quanto no ambiente Github.
# Observe que o professor ir√° testar seu programa com os arquivos de testes que voc√™ criar e com,
# no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor

# #####################################################################################################

# #C√ìDIGO:

# Escreva na vari√°vel abaixo ou o path do arquivo ou o nome dele se estiver na mesma pasta.

escolhaArquivo = '/Users/eros/Desktop/tde_conjuntos _1/teste3.txt'

# Fun√ß√£o que realiza a uni√£o dos conjuntos:
def funcao_uniao(arquivo):
    linha = arquivo.readline().strip()
    conj1 = [item.strip() for item in linha.split(',')]  # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    linha = arquivo.readline().strip()
    conj2 = [item.strip() for item in linha.split(',')] # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha

    # set determina determina os conjuntos que ser√£o utilizados na opera√ß√£o
    conj1 = set(conj1)
    conj2 = set(conj2)
    
    # Opera√ß√£o de uni√£o feita com os conjuntos
    conjU = conj1 | conj2

    # Resultado √© printado no terminal de sa√≠da
    print(f"\nUni√£o: conjunto 1 {conj1}, conjunto 2 {conj2}.  Resultado: {conjU}")

# Fun√ß√£o que realiza a intersec√ß√£o dos conjuntos: 
def funcao_interseccao (arquivo): 
    linha = arquivo.readline().strip()
    conj1 = [item.strip() for item in linha.split(',')]  # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    linha = arquivo.readline().strip()
    conj2 = [item.strip() for item in linha.split(',')] # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    
    # set determina determina os conjuntos que ser√£o utilizados na opera√ß√£o
    conj1 = set(conj1)
    conj2 = set(conj2)

     # Opera√ß√£o de intersec√ß√£o feita com os conjuntos
    conjI = conj1 & conj2
    
    # Resultado √© printado no terminal de sa√≠da
    print(f"\nIntersec√ß√£o: conjunto 1 {conj1} conjunto 2 {conj2}.  Resultado: {conjI}")

    

def funcao_diferenca(arquivo):
    linha = arquivo.readline().strip()
    conj1 = [item.strip() for item in linha.split(',')]  # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    linha = arquivo.readline().strip()
    conj2 = [item.strip() for item in linha.split(',')] # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    linha = arquivo.readline().strip()

     # set determina determina os conjuntos que ser√£o utilizados na opera√ß√£o
    conj1 = set(conj1)
    conj2 = set(conj2)

    # Opera√ß√£o de diferen√ßa feita com os conjuntos
    conjD = conj1 - conj2
    
    # Resultado √© printado no terminal de sa√≠da
    print(f"\nDiferen√ßa: conjunto 1 {conj1}, conjunto 2 {conj2}.  Resultado: {conjD}")


def funcao_produto_cartesiano(arquivo):
    linha = arquivo.readline().strip()
    conj1 = [item.strip() for item in linha.split(',')]  # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha
    linha = arquivo.readline().strip()
    conj2 = [item.strip() for item in linha.split(',')]  # Remove espa√ßos de cada item que n√£o foram antes removidos pelo strip da linha

    # set determina determina os conjuntos que ser√£o utilizados na opera√ß√£o
    conj1 = set(conj1)
    conj2 = set(conj2)

    # Produto cartesiano feito com os conjuntos
    conjC = [(a, b) for a in conj1 for b in conj2]
            
    # Resultado √© printado no terminal de sa√≠da
    print(f"\nProduto Cartesiano: conjunto 1 {conj1}, conjunto 2 {conj2}.  Resultado: {conjC}")



# Aqui √© onde as fun√ß√µes s√£o chamadas:

# Primeiramente √© utilizado um try e except para caso ocorra algum erro na abertura do arquivo selecionado para ser lido
try:
    arquivo = open(escolhaArquivo, "r")   #Arquivo esolhido √© aberto
    linha = arquivo.readline().strip()  # √© feita a leitura da primeira linha (a qual determina a quantidade de opera√ß√µes a ser feita - sendo esta armazenada na vari√°vel numOperacoes.)

    numOperacoes = int(linha)
    idx = 0
    while idx <= numOperacoes:  # √© utilizado um loop while para repetir o processo de leitura at√© que todas as opera√ß√µes descritas no arquivo txt tenham sido executadas
        linha = arquivo.readline().strip()  # √© lida a pr√≥xima linha que determina qual opera√ß√£o ser√° executada atrav√©s de if e elif. 
        if linha == "U":     # Dependendo de qual opera√ß√£o estiver no arquivo a correnpondente fun√ß√£o ser√° chamada
            funcao_uniao(arquivo) 
            idx+=1   #√© incrementado o idx do while a cada fun√ß√£o executada

        elif linha == "I":
            funcao_interseccao (arquivo)
            idx+=1
        elif linha == "D":
            funcao_diferenca(arquivo)
            idx+=1
        elif linha == "C":
            funcao_produto_cartesiano(arquivo)
            idx+=1

    arquivo.close()  #Arquivo √© fechado ap√≥s execu√ß√£o das fun√ß√µes

# except utilizado caso ocorra de o arquivo n√£o ser encontrado ou outro erro ocorrer
except FileNotFoundError:
    print(f"Arquivo '{escolhaArquivo}' n√£o encontrado.")
except Exception as e:
    print(f"Ocorreu um erro: {e}")



